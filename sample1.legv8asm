
ADDI X0, XZR, #0 
ADDI X1, XZR, #17  
PRNL 
BL fill            
BL quicksort
HALT 
quicksort:
    SUBI SP, SP, #8 
    STUR LR, [SP,#0] 
    SUBI X2, X1, #1 
    ORR X1, XZR, XZR   
    BL quicksort_recurse
    LDUR LR, [SP,#0]       
    ADDI SP, SP, #8        
    BR LR
quicksort_recurse:
    SUBI SP, SP, #24         
    STUR LR, [SP,#0]         
    STUR X1, [SP,#8]         
    STUR X2, [SP,#16]        
    SUBS X9, X1, X2          
    B.GE quicksort_return   
    BL partition             
    LDUR X1, [SP,#8]         
    LDUR X2, [SP,#16]        
    ORR X9, XZR, X4          
    SUBI X2, X9, #1          
    BL quicksort_recurse      
    ADDI X1, X4, #1          
    LDUR X2, [SP,#16]        
    BL quicksort_recurse      
    quicksort_return:
        LDUR X1, [SP,#8]         
        LDUR X2, [SP,#16]        
        LDUR LR, [SP,#0]         
        ADDI SP, SP, #24         
        BR LR                    
partition:
    SUBI SP, SP, #8 
    STUR LR, [SP,#0] 
    LSL X12, X1, #3    
    ADD X13, X0, X12   
    LDUR X14, [X13, #0] 
    ORR X22, XZR, X14   
    ADDI X23, X1, #1   
    ORR X21, XZR, X2   
    ORR X19, XZR, X1   
    PRNT X19
    ORR X20, XZR, X2   
    loopPartition:
        SUBS X15, X23, X21   
        B.GT exitLoopPartition    
        ORR X1, XZR, X23     
        ORR X3, XZR, X22
        BL next_i 
        ORR X23, XZR, X4                
        ORR X1, XZR, X21
        ORR X2, XZR, X19
        ORR X3, XZR, X22
        BL next_j 
        ORR X21, XZR, X4 
        SUBS X15, X23, X21   
        B.GE loopPartition      
        ORR X1, XZR, X23   
        ORR X2, XZR, X21   
        BL swap
        B loopPartition
    exitLoopPartition:  
        SUBS X11, X19, X21     
        B.EQ returnJ      
        ORR X1, XZR, X19
        ORR X2, XZR, X21
        BL swap
    returnJ:
        ORR X4, XZR, X21
        LDUR LR, [SP,#0]       
        ADDI SP, SP, #8        
        BR LR                      
next_i:
    PRNL 
    whileLoopI:
        SUBS X9, X1, X2   
        B.GT exitLoopI    
        LSL X10, X1, #3   
        ADD X11, X0, X10  
        LDUR X12, [X11, #0] 
        SUBS X13, X12, X3   
        B.GE exitLoopI      
        ADDI X1, X1, #1     
        B whileLoopI        
    exitLoopI:
        SUBS X9, X1, X2     
        B.LE return_i       
        ADDI X4, X2, #1     
        BR LR               

    return_i:
        ORR X4, XZR, X1     
        BR LR              
next_j:
    PRNL 
    whileLoopJ:
        SUBS X9, X1, X2       
        B.LE exitLoopJ        
        LSL X10, X1, #3       
        ADD X11, X0, X10     
        LDUR X12, [X11, #0]   
        SUBS X13, X12, X3    
        B.LT exitLoopJ        
        SUBI X1, X1, #1      
        B whileLoopJ          
    exitLoopJ:
        SUBS X9, X1, X2       
        B.GT return_j         

        ORR X4, XZR, X2       
        BR LR                 
    return_j:
        ORR X4, XZR, X1       
        BR LR                 
fill: 
    ADDI X9, XZR, #0  
    fillLoop: 
        SUBS X10, X9, X1 
        B.GE exitLoopFill    
        SUB X11, X1, X9  
        SUBI X11, X11, #1  
        LSL X12, X9, #3   
        ADD X13, X0, X12   
        STUR X11, [X13, #0]  
        ADDI X9, X9, #1   

        B fillLoop         
    exitLoopFill:    
        BR LR             
swap:
    LSL X10, X1, #3        
    ADD X11, X0, X10       
    LDUR X12, [X11, #0]    
    ORR X9, XZR, X12       
    LSL X13, X2, #3        
    ADD X14, X0, X13       
    LDUR X15, [X14, #0]    
    STUR X15, [X11, #0]    
    STUR X9, [X14, #0]    
    BR LR                  
